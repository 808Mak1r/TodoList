{"version":3,"sources":["components/Todos/TodoInput.tsx","components/Todos/TodoItem.tsx","config/leanCloud.tsx","components/UserDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoInput","className","type","value","this","props","content","onChange","changeTitle","bind","onKeyPress","submit","e","key","onSubmit","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","AV","init","appId","appKey","getUserFromAVUser","AVUser","id","attributes","UserDialog","state","selected","formData","username","password","setState","target","preventDefault","successFn","errorFn","user","User","setUsername","setPassword","signUp","then","loginedUser","call","error","onSignUp","code","alert","logIn","signIn","onSignIn","stateCopy","JSON","parse","stringify","signUpForm","changeFormDate","signInForm","switch","App","newTodo","todoList","todos","filter","item","deleted","map","index","signOut","addTodo","onSignUpOrSignIn","logOut","event","push","idMaker","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03cbbcee.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TodoInput.scss'\n\ninterface ITodoInputProps {\n  content: string,\n  onSubmit: (event: any) => void,\n  onChange: (event: any) => void\n}\n\nexport default class TodoInput extends Component<ITodoInputProps> {\n  render() {\n    return <input\n      className=\"TodoInput\"\n      type=\"text\"\n      value={this.props.content}\n      onChange={this.changeTitle.bind(this)}\n      onKeyPress={this.submit.bind(this)} />\n\n  }\n\n  changeTitle(e: any) {\n    this.props.onChange(e)\n  }\n\n  submit(e: any) {\n    if (e.key === 'Enter') {\n      this.props.onSubmit(e)\n    }\n  }\n}","import React, { Component } from 'react'\nimport './TodoItem.scss'\n\ninterface ITodoItemProps {\n  todo: {\n    title: string,\n    status: string\n  },\n  onToggle: (e: any, todo: any) => void,\n  onDelete: (e: any, todo: any) => void\n}\n\nexport default class TodoItem extends Component<ITodoItemProps> {\n  render() {\n    return (\n      <div className=\"TodoItem\">\n        <input type=\"checkbox\"\n          checked={this.props.todo.status === 'completed'}\n          onChange={this.toggle.bind(this)}\n        />\n        <span className=\"title\">{this.props.todo.title}</span>\n        <button onClick={this.delete.bind(this)}>删除</button>\n      </div>\n    )\n  }\n\n  toggle(e: any) {\n    this.props.onToggle(e, this.props.todo)\n  }\n\n  delete(e: any) {\n    this.props.onDelete(e, this.props.todo)\n  }\n}","import AV from 'leancloud-storage'\r\n\r\nvar APP_ID = 'Cm3g0e6jj5b91eJ8rUVuubGb-MdYXbMMI';\r\nvar APP_KEY = 'Nq82JXJqI3dQw44wjULW12el';\r\n\r\nAV.init({\r\n  appId: APP_ID,\r\n  appKey: APP_KEY\r\n})\r\n\r\nexport default AV\r\n\r\nexport function signUp(username: string, password: string, successFn: { (user: any): void; call?: any; }, errorFn: { (error: any): void; call?: any; }) {\r\n  // 新建 AVUser 对象实例\r\n  var user = new AV.User()\r\n  // 设置用户名\r\n  user.setUsername(username)\r\n  // 设置密码\r\n  user.setPassword(password)\r\n  // 设置邮箱\r\n  user.signUp().then(function (loginedUser) {\r\n    let user = getUserFromAVUser(loginedUser)\r\n    successFn.call(null, user)\r\n  }, function (error) {\r\n    errorFn.call(null, error)\r\n  })\r\n\r\n  return undefined\r\n\r\n}\r\n\r\nexport function signIn(username: string, password: string, successFn: { (user: any): void; call?: any; }, errorFn: { (error: any): void; call?: any; }) {\r\n  AV.User.logIn(username, password).then(function (loginedUser) {\r\n    let user = getUserFromAVUser(loginedUser)\r\n    successFn.call(null, user)\r\n  }, function (error) {\r\n    errorFn.call(null, error)\r\n  })\r\n}\r\n\r\n\r\n\r\nexport function signOut() {\r\n  AV.User.logOut()\r\n  return undefined\r\n}\r\n\r\nfunction getUserFromAVUser(AVUser: any) {\r\n  return {\r\n    id: AVUser.id,\r\n    ...AVUser.attributes\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { signUp, signIn } from '../config/leanCloud'\r\nimport './UserDialog.scss'\r\n\r\n\r\n\r\ninterface IUserDialogProps {\r\n  selected: string,\r\n  formData: {\r\n    username: string,\r\n    password: string\r\n  }\r\n}\r\n\r\nexport default class UserDialog extends Component<any, IUserDialogProps>{\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      selected: 'signUp',\r\n      formData: {\r\n        username: '',\r\n        password: ''\r\n      }\r\n    }\r\n  }\r\n\r\n  switch(e: any) {\r\n    this.setState({\r\n      selected: e.target.value\r\n    })\r\n  }\r\n\r\n  signUp(e: any) {\r\n    e.preventDefault()\r\n    let { username, password } = this.state.formData\r\n    let success = (user: any) => {\r\n      this.props.onSignUp.call(null, user)\r\n    }\r\n    let error = (error: any) => {\r\n      switch (error.code) {\r\n        case 202:\r\n          alert('用户名已被占用')\r\n          break\r\n        case 203:\r\n          alert('电子邮箱地址已经被占用')\r\n          break\r\n        case 204:\r\n          alert('没有提供电子邮箱地址')\r\n          break\r\n        case 502:\r\n          alert('服务器维护中')\r\n          break\r\n        default:\r\n          alert(error)\r\n          break\r\n      }\r\n    }\r\n    signUp(username, password, success, error)\r\n  }\r\n\r\n\r\n  signIn(e: any) {\r\n    e.preventDefault()\r\n    let { username, password } = this.state.formData\r\n    let success = (user: any) => {\r\n      this.props.onSignIn.call(null, user)\r\n    }\r\n    let error = (error: any) => {\r\n      switch (error.code) {\r\n        case 205:\r\n          alert('找不到电子邮箱地址对应的用户')\r\n          break\r\n        case 210:\r\n          alert('用户名与密码不匹配')\r\n          break\r\n        case 211:\r\n          alert('找不到用户')\r\n          break\r\n        case 502:\r\n          alert('服务器维护中')\r\n          break\r\n        default:\r\n          alert(error)\r\n          break\r\n      }\r\n    }\r\n    signIn(username, password, success, error)\r\n  }\r\n\r\n\r\n  changeFormDate(key: any, e: any) {\r\n    // this.state.formData.username = e.target.value\r\n    // this.setState(this.state)\r\n    // 像上面这样写会看到一个警告 warning  Do not mutate state directly. Use setState()\r\n    let stateCopy = JSON.parse(JSON.stringify(this.state))  // 用 JSON 深拷贝\r\n    stateCopy.formData[key] = e.target.value\r\n    this.setState(stateCopy)\r\n  }\r\n\r\n  render() {\r\n    let signUpForm = (\r\n      <form className=\"signUp\" onSubmit={this.signUp.bind(this)}> {/* 注册*/}\r\n        <div className=\"row\">\r\n          <label>用户名</label>\r\n          <input type=\"text\"\r\n            value={this.state.formData.username}\r\n            onChange={this.changeFormDate.bind(this, 'username')}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <label>密码</label>\r\n          <input type=\"password\"\r\n            value={this.state.formData.password}\r\n            onChange={this.changeFormDate.bind(this, 'password')}\r\n          />\r\n        </div>\r\n        <div className=\"row actions\">\r\n          <button type=\"submit\">注册</button>\r\n        </div>\r\n      </form>\r\n    )\r\n    let signInForm = (\r\n      <form className=\"signIn\" onSubmit={this.signIn.bind(this)}> {/* 登录*/}\r\n        <div className=\"row\">\r\n          <label>用户名</label>\r\n          <input type=\"text\"\r\n            value={this.state.formData.username}\r\n            onChange={this.changeFormDate.bind(this, 'username')}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <label>密码</label>\r\n          <input type=\"password\"\r\n            value={this.state.formData.password}\r\n            onChange={this.changeFormDate.bind(this, 'password')}\r\n          />\r\n        </div>\r\n        <div className=\"row actions\">\r\n          <button type=\"submit\">登录</button>\r\n        </div>\r\n      </form>\r\n    )\r\n    return (\r\n      <div className=\"UserDialog-Wrapper\">\r\n        <div className=\"UserDialog\">\r\n          <nav>\r\n            <label>\r\n              <input type=\"radio\" value=\"signUp\"\r\n                checked={this.state.selected === 'signUp'}\r\n                onChange={this.switch.bind(this)}\r\n              /> 注册</label>\r\n            <label>\r\n              <input type=\"radio\" value=\"signIn\"\r\n                checked={this.state.selected === 'signIn'}\r\n                onChange={this.switch.bind(this)}\r\n              /> 登录</label>\r\n          </nav>\r\n          <div className=\"panes\">\r\n            {this.state.selected === 'signUp' ? signUpForm : null}\r\n            {this.state.selected === 'signIn' ? signInForm : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\nimport TodoInput from './components/Todos/TodoInput'\nimport TodoItem from './components/Todos/TodoItem'\nimport UserDialog from './components/UserDialog'\nimport { signOut } from './config/leanCloud'\nimport 'normalize.css'\nimport './reset.css'\nimport './App.scss'\n\n\n\ninterface IAppState {\n  user: any,\n  newTodo: string,\n  todoList: any[]\n}\n\n\nclass App extends Component<any, IAppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      user: {},\n      newTodo: '',\n      todoList: []\n    }\n  }\n  render() {\n    let todos = this.state.todoList\n      .filter((item) => !item.deleted)\n      .map((item, index) => {\n        return (\n          <li key={index}>\n            <TodoItem\n              todo={item}\n              onToggle={this.toggle.bind(this)}\n              onDelete={this.delete.bind(this)}\n            />\n          </li>\n        )\n      })\n\n\n    return (\n      <div className=\"App\">\n        <h1>{this.state.user.username || '我'}的待办\n          {this.state.user.id ? <button onClick={this.signOut.bind(this)}>登出</button> : null}\n        </h1>\n        <div className=\"inputWrapper\">\n          <TodoInput\n            content={this.state.newTodo}\n            onChange={this.changeTitle.bind(this)}\n            onSubmit={this.addTodo.bind(this)}\n          />\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n        {this.state.user.id ?\n          null :\n          <UserDialog\n            onSignUp={this.onSignUpOrSignIn.bind(this)}\n            onSignIn={this.onSignUpOrSignIn.bind(this)} />}\n      </div>\n    )\n  }\n\n  signOut() {\n    signOut()\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\n    stateCopy.user = {}\n    this.setState(stateCopy)\n  }\n\n  onSignUpOrSignIn(user: any) {\n    //消除「不要直接修改 state」的警告\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\n    stateCopy.user = user\n    this.setState(stateCopy)\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  toggle(e: any, todo: any) {\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n\n  delete(event: any, todo: any) {\n    todo.delete = true\n    this.setState(this.state)\n  }\n\n  changeTitle(event: any) {\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n\n  addTodo(event: any) {\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n}\n\nlet id = 0\nfunction idMaker() {\n  id += 1\n  return id\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}