{"version":3,"sources":["components/TodoInput.tsx","components/TodoItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoInput","className","type","value","this","props","content","onChange","changeTitle","bind","onKeyPress","submit","e","key","onSubmit","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","App","state","newTodo","todoList","todos","filter","item","deleted","map","index","addTodo","setState","event","target","push","id","idMaker","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUASqBA,G,uLAEjB,OAAO,2BACLC,UAAU,YACVC,KAAK,OACLC,MAAOC,KAAKC,MAAMC,QAClBC,SAAUH,KAAKI,YAAYC,KAAKL,MAChCM,WAAYN,KAAKO,OAAOF,KAAKL,U,kCAIrBQ,GACVR,KAAKC,MAAME,SAASK,K,6BAGfA,GACS,UAAVA,EAAEC,KACJT,KAAKC,MAAMS,SAASF,O,GAjBaG,cCGlBC,G,uLAEjB,OACE,yBAAKf,UAAU,YACb,2BAAOC,KAAK,WACVe,QAAoC,cAA3Bb,KAAKC,MAAMa,KAAKC,OACzBZ,SAAUH,KAAKgB,OAAOX,KAAKL,QAE7B,0BAAMH,UAAU,SAASG,KAAKC,MAAMa,KAAKG,OACzC,4BAAQC,QAASlB,KAAKmB,OAAOd,KAAKL,OAAlC,mB,6BAKCQ,GACLR,KAAKC,MAAMmB,SAASZ,EAAGR,KAAKC,MAAMa,Q,6BAG7BN,GACLR,KAAKC,MAAMoB,SAASb,EAAGR,KAAKC,MAAMa,U,GAnBAH,cCChCW,G,8BACJ,WAAYrB,GAAa,IAAD,8BACtB,4CAAMA,KACDsB,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJU,E,sEAOd,IAAD,OACHC,EAAQ1B,KAAKuB,MAAME,SACpBE,OAAO,SAACC,GAAD,OAAWA,EAAKC,UACvBC,IAAI,SAACF,EAAMG,GACV,OACE,wBAAItB,IAAKsB,GACP,kBAAC,EAAD,CACEjB,KAAMc,EACNR,SAAU,EAAKJ,OAAOX,KAAK,GAC3BgB,SAAU,EAAKF,OAAOd,KAAK,QAOrC,OACE,yBAAKR,UAAU,OACb,wDACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEK,QAASF,KAAKuB,MAAMC,QACpBrB,SAAUH,KAAKI,YAAYC,KAAKL,MAChCU,SAAUV,KAAKgC,QAAQ3B,KAAKL,SAGhC,wBAAIH,UAAU,YACX6B,M,6BAMFlB,EAAQM,GACbA,EAAKC,OAAyB,cAAhBD,EAAKC,OAAyB,GAAK,YACjDf,KAAKiC,SAASjC,KAAKuB,S,6BAGdW,EAAYpB,GACjBA,EAAKK,QAAS,EACdnB,KAAKiC,SAASjC,KAAKuB,S,kCAGTW,GACVlC,KAAKiC,SAAS,CACZT,QAASU,EAAMC,OAAOpC,MACtB0B,SAAUzB,KAAKuB,MAAME,a,8BAIjBS,GACNlC,KAAKuB,MAAME,SAASW,KAAK,CACvBC,GAAIC,IACJrB,MAAOiB,EAAMC,OAAOpC,MACpBgB,OAAQ,KACRc,SAAS,IAEX7B,KAAKiC,SAAS,CACZT,QAAS,GACTC,SAAUzB,KAAKuB,MAAME,e,GAnETd,cAwEd0B,EAAK,EACT,SAASC,IAEP,OADAD,GAAM,EAMOf,QCjFKiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1778d82c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TodoInput.scss'\n\ninterface ITodoInputProps {\n  content: string,\n  onSubmit: (event: any) => void,\n  onChange: (event: any) => void\n}\n\nexport default class TodoInput extends Component<ITodoInputProps> {\n  render() {\n    return <input\n      className=\"TodoInput\"\n      type=\"text\"\n      value={this.props.content}\n      onChange={this.changeTitle.bind(this)}\n      onKeyPress={this.submit.bind(this)} />\n\n  }\n\n  changeTitle(e: any) {\n    this.props.onChange(e)\n  }\n\n  submit(e: any) {\n    if (e.key === 'Enter') {\n      this.props.onSubmit(e)\n    }\n  }\n}","import React, { Component } from 'react'\nimport './TodoItem.scss'\n\ninterface ITodoItemProps {\n  todo: {\n    title: string,\n    status: string\n  },\n  onToggle: (e: any, todo: any) => void,\n  onDelete: (e: any, todo: any) => void\n}\n\nexport default class TodoItem extends Component<ITodoItemProps> {\n  render() {\n    return (\n      <div className=\"TodoItem\">\n        <input type=\"checkbox\"\n          checked={this.props.todo.status === 'completed'}\n          onChange={this.toggle.bind(this)}\n        />\n        <span className=\"title\">{this.props.todo.title}</span>\n        <button onClick={this.delete.bind(this)}>删除</button>\n      </div>\n    )\n  }\n\n  toggle(e: any) {\n    this.props.onToggle(e, this.props.todo)\n  }\n\n  delete(e: any) {\n    this.props.onDelete(e, this.props.todo)\n  }\n}","import React, { Component } from 'react'\nimport TodoInput from './components/TodoInput'\nimport TodoItem from './components/TodoItem'\nimport 'normalize.css'\nimport './reset.css'\nimport './App.scss'\n\n\ninterface IAppState {\n  newTodo: string,\n  todoList: any[]\n}\n\nclass App extends Component<any, IAppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: []\n    }\n  }\n  render() {\n    let todos = this.state.todoList\n      .filter((item) => !item.deleted)\n      .map((item, index) => {\n        return (\n          <li key={index}>\n            <TodoItem\n              todo={item}\n              onToggle={this.toggle.bind(this)}\n              onDelete={this.delete.bind(this)}\n            />\n          </li>\n        )\n      })\n\n\n    return (\n      <div className=\"App\">\n        <h1>我的待办</h1>\n        <div className=\"inputWrapper\">\n          <TodoInput\n            content={this.state.newTodo}\n            onChange={this.changeTitle.bind(this)}\n            onSubmit={this.addTodo.bind(this)}\n          />\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n      </div>\n    )\n  }\n\n  toggle(e: any, todo: any) {\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n\n  delete(event: any, todo: any) {\n    todo.delete = true\n    this.setState(this.state)\n  }\n\n  changeTitle(event: any) {\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n\n  addTodo(event: any) {\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n}\n\nlet id = 0\nfunction idMaker() {\n  id += 1\n  return id\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}